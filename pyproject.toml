[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agi-eval-sandbox"
version = "0.1.0"
description = "One-click evaluation environment bundling DeepEval, HELM-Lite, MT-Bench, and custom benchmarks"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
keywords = [
    "ai", "evaluation", "llm", "benchmarks", "machine-learning",
    "testing", "automation", "sdlc", "devops"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "google-cloud-aiplatform>=1.38.0",
    "azure-cognitiveservices-language-textanalytics>=5.3.0",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "plotly>=5.17.0",
    "scikit-learn>=1.3.0",
    "pytest>=7.4.0",
    "requests>=2.31.0",
    "aiofiles>=23.2.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "pre-commit>=3.6.0",
    "jupyterlab>=4.0.0",
    "ipywidgets>=8.1.0",
    "notebook>=7.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "coverage>=7.3.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

security = [
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
]

performance = [
    "locust>=2.17.0",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

[project.urls]
Homepage = "https://github.com/your-org/agi-eval-sandbox"
Documentation = "https://docs.your-org.com/agi-eval"
Repository = "https://github.com/your-org/agi-eval-sandbox.git"
"Bug Tracker" = "https://github.com/your-org/agi-eval-sandbox/issues"
Changelog = "https://github.com/your-org/agi-eval-sandbox/blob/main/CHANGELOG.md"

[project.scripts]
agi-eval = "api.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["api*", "dashboard*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql", "*.md"]

# ===== BLACK CONFIGURATION =====
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# ===== ISORT CONFIGURATION =====
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["api", "dashboard", "tests"]
known_third_party = [
    "fastapi", "sqlalchemy", "pydantic", "celery", "redis", "openai",
    "anthropic", "transformers", "torch", "numpy", "pandas", "pytest"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["*/migrations/*", "*/venv/*", "*/.venv/*"]

# ===== MYPY CONFIGURATION =====
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "transformers.*",
    "torch.*",
    "anthropic.*",
    "openai.*",
    "google.*",
    "azure.*",
    "plotly.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=api",
    "--cov=dashboard",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--junitxml=reports/pytest.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "smoke: marks tests as smoke tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["api", "dashboard"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
    "*/conftest.py",
    "*/settings/*",
    "*/__main__.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# ===== BANDIT CONFIGURATION =====
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection in tests

# ===== SEMANTIC RELEASE CONFIGURATION =====
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_pattern = ["api/__init__.py:__version__ = \"{version}\""]
build_command = "pip install build && python -m build"
upload_to_pypi = false
upload_to_release = true
commit_message = "chore(release): {version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.changelog]
template_dir = ".github/release_templates/"
changelog_file = "CHANGELOG.md"