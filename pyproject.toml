[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agi-eval-sandbox"
version = "0.1.0"
description = "One-click evaluation environment bundling DeepEval, HELM-Lite, MT-Bench, and custom benchmarks"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"}
]
keywords = ["ai", "evaluation", "llm", "benchmarks", "machine-learning", "testing", "automation", "sdlc", "devops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Testing",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "streamlit>=1.28.0",
    "jupyter>=1.0.0",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "google-cloud-aiplatform>=1.38.0",
    "huggingface-hub>=0.19.0",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.2.0",
    "scikit-learn>=1.3.0",
    "pyyaml>=6.0.1",
    "click>=8.1.0",
    "rich>=13.6.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.2.0",
    "python-multipart>=0.0.6",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "coverage>=7.3.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "ruff>=0.1.6",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-autorefs>=0.5.0",
    "mkdocstrings[python]>=0.24.0",
]
all = ["agi-eval-sandbox[dev,test,docs]"]

[project.urls]
Homepage = "https://github.com/your-org/agi-eval-sandbox"
Documentation = "https://docs.your-org.com/agi-eval"
Repository = "https://github.com/your-org/agi-eval-sandbox.git"
Issues = "https://github.com/your-org/agi-eval-sandbox/issues"
Changelog = "https://github.com/your-org/agi-eval-sandbox/blob/main/CHANGELOG.md"

[project.scripts]
agi-eval = "agi_eval_sandbox.cli:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["agi_eval_sandbox*"]

[tool.setuptools.package-data]
"agi_eval_sandbox" = ["py.typed", "templates/*", "static/*"]

# Black formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "redis.*",
    "prometheus_client.*",
    "streamlit.*",
    "plotly.*",
    "seaborn.*",
    "matplotlib.*",
    "anthropic.*",
    "openai.*",
    "google.*",
    "transformers.*",
    "torch.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "benchmark: marks tests as benchmark tests",
    "gpu: marks tests that require GPU",
    "external_api: marks tests that call external APIs",
]
asyncio_mode = "auto"
timeout = 300

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration (modern Python linter)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "B905",   # zip without explicit strict parameter
    "C901",   # too complex
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
]
unfixable = [
    "F401",  # unused imports
    "F841",  # unused variables
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["ARG001", "ARG002", "PLR2004", "S101", "S106"]

[tool.ruff.isort]
known-first-party = ["agi_eval_sandbox"]

[tool.ruff.mccabe]
max-complexity = 10

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Semantic release configuration
[tool.semantic_release]
version_toml = [
    "pyproject.toml:project.version",
]
version_variables = [
    "src/agi_eval_sandbox/__init__.py:__version__",
]
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
commit_author = "github-actions <action@github.com>"

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^docs:",
    "^test:",
    "^chore:",
    "^ci:",
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "beta"