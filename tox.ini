# Tox configuration for AGI Evaluation Sandbox
# Multi-environment testing and automation
# See: https://tox.readthedocs.io/

[tox]
envlist = py{39,310,311,312}, lint, type, security, docs
skipsdist = False
isolated_build = True
minversion = 4.0

[testenv]
# Base test environment
deps = 
    pytest>=7.4.0
    pytest-asyncio>=0.23.0
    pytest-cov>=4.1.0
    pytest-xdist>=3.5.0
    pytest-mock>=3.12.0
    httpx>=0.25.0
    factory-boy>=3.3.0
    faker>=20.1.0

commands = 
    pytest {posargs:tests/} -v --cov=src --cov-report=term-missing --cov-report=html --cov-report=xml

setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}

[testenv:lint]
# Code linting and formatting
deps = 
    black>=23.11.0
    isort>=5.12.0
    flake8>=6.1.0
    ruff>=0.1.6
    
commands = 
    black --check --diff src tests
    isort --check-only --diff src tests
    flake8 src tests
    ruff check src tests

[testenv:format]
# Code formatting (auto-fix)
deps = {[testenv:lint]deps}
commands = 
    black src tests
    isort src tests
    ruff check --fix src tests

[testenv:type]
# Type checking
deps = 
    mypy>=1.7.0
    types-requests
    types-redis
    types-PyYAML
    
commands = 
    mypy src tests

[testenv:security]
# Security scanning
deps = 
    bandit>=1.7.0
    safety>=2.3.0
    
commands = 
    bandit -r src/ -f json -o {toxworkdir}/bandit-report.json
    bandit -r src/ -f txt
    safety check --json --output {toxworkdir}/safety-report.json
    safety check

[testenv:docs]
# Documentation building
deps = 
    mkdocs>=1.5.0
    mkdocs-material>=9.4.0
    mkdocs-autorefs>=0.5.0
    mkdocstrings[python]>=0.24.0
    
commands = 
    mkdocs build --strict

[testenv:integration]
# Integration tests
deps = {[testenv]deps}
commands = 
    pytest {posargs:tests/integration/} -v --maxfail=1

[testenv:e2e]
# End-to-end tests
deps = 
    {[testenv]deps}
    playwright>=1.40.0
    
commands = 
    playwright install
    pytest {posargs:tests/e2e/} -v --maxfail=1

[testenv:performance]
# Performance tests
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
    
commands = 
    pytest {posargs:tests/performance/} -v --benchmark-only

[testenv:coverage]
# Coverage reporting
deps = 
    {[testenv]deps}
    coverage[toml]>=7.3.0
    
commands = 
    coverage combine
    coverage report --show-missing --fail-under=80
    coverage html
    coverage xml

[testenv:clean]
# Clean up build artifacts
deps = 
commands = 
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage*', ignore_errors=True)"

[testenv:build]
# Build package
deps = 
    build>=1.0.0
    wheel>=0.42.0
    
commands = 
    python -m build

[testenv:dev]
# Development environment
deps = 
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type]deps}
    {[testenv:security]deps}
    {[testenv:docs]deps}
    
commands = 
    python -c "print('Development environment ready!')"

# Global settings
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv

[coverage:run]
source = src
omit = 
    */tests/*
    */venv/*
    */.venv/*
    */migrations/*
    setup.py
branch = true
parallel = true

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
show_missing = true
skip_covered = false
sort = Cover