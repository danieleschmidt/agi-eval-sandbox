apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: agi-eval-sandbox
  labels:
    app: agi-eval-api
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: agi-eval-api
  template:
    metadata:
      labels:
        app: agi-eval-api
        component: api
    spec:
      serviceAccountName: agi-eval-service-account
      securityContext:
        fsGroup: 1000
      containers:
      - name: api
        image: agi-eval-sandbox:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/1"
        envFrom:
        - configMapRef:
            name: agi-eval-config
        resources:
          limits:
            cpu: 2000m
            memory: 4Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models-cache
          mountPath: /app/models
      volumes:
      - name: logs
        emptyDir: {}
      - name: models-cache
        persistentVolumeClaim:
          claimName: models-cache-pvc
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - agi-eval-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker-deployment
  namespace: agi-eval-sandbox
  labels:
    app: agi-eval-worker
    component: worker
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: agi-eval-worker
  template:
    metadata:
      labels:
        app: agi-eval-worker
        component: worker
    spec:
      serviceAccountName: agi-eval-service-account
      securityContext:
        fsGroup: 1000
      containers:
      - name: worker
        image: agi-eval-sandbox:latest
        imagePullPolicy: Always
        command: 
        - celery
        - --app
        - agi_eval_sandbox.core.tasks
        - worker
        - --loglevel=info
        - --concurrency=4
        - --max-tasks-per-child=100
        - --max-memory-per-child=2000000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/1"
        envFrom:
        - configMapRef:
            name: agi-eval-config
        resources:
          limits:
            cpu: 4000m
            memory: 8Gi
          requests:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models-cache
          mountPath: /app/models
      volumes:
      - name: logs
        emptyDir: {}
      - name: models-cache
        persistentVolumeClaim:
          claimName: models-cache-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpu-worker-deployment
  namespace: agi-eval-sandbox
  labels:
    app: agi-eval-gpu-worker
    component: gpu-worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agi-eval-gpu-worker
  template:
    metadata:
      labels:
        app: agi-eval-gpu-worker
        component: gpu-worker
    spec:
      serviceAccountName: agi-eval-service-account
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: gpu-worker
        image: agi-eval-sandbox:gpu
        imagePullPolicy: Always
        command: 
        - celery
        - --app
        - agi_eval_sandbox.core.tasks
        - worker
        - --loglevel=info
        - --concurrency=2
        - --queue=gpu-tasks
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: CELERY_BROKER_URL
          value: "redis://redis-service:6379/1"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        envFrom:
        - configMapRef:
            name: agi-eval-config
        resources:
          limits:
            nvidia.com/gpu: 1
            cpu: 4000m
            memory: 16Gi
          requests:
            nvidia.com/gpu: 1
            cpu: 2000m
            memory: 8Gi
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: models-cache
          mountPath: /app/models
      volumes:
      - name: logs
        emptyDir: {}
      - name: models-cache
        persistentVolumeClaim:
          claimName: models-cache-pvc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: agi-eval-sandbox
  labels:
    app: nginx
    component: load-balancer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        component: load-balancer
    spec:
      containers:
      - name: nginx
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
          name: http
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config