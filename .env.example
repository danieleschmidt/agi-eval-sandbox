# AGI Evaluation Sandbox Environment Configuration
# Copy this file to .env and update with your actual values

# ==================================================
# API Keys - Model Providers
# ==================================================

# OpenAI Configuration
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_ORG_ID=org-your-organization-id  # Optional

# Anthropic Configuration
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here

# Google AI Configuration
GOOGLE_API_KEY=your-google-ai-api-key-here
GOOGLE_PROJECT_ID=your-google-cloud-project-id  # For Vertex AI

# Azure OpenAI Configuration (Optional)
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_API_KEY=your-azure-openai-api-key
AZURE_OPENAI_API_VERSION=2024-02-15-preview

# Hugging Face Configuration (Optional)
HUGGINGFACE_API_TOKEN=hf_your-huggingface-token-here

# ==================================================
# Database Configuration
# ==================================================

# PostgreSQL Database
DATABASE_URL=postgresql://agi_eval:agi_eval_password@localhost:5432/agi_eval_db
DB_HOST=localhost
DB_PORT=5432
DB_NAME=agi_eval_db
DB_USER=agi_eval
DB_PASSWORD=agi_eval_password

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=  # Leave empty for no password

# ==================================================
# Application Configuration
# ==================================================

# Environment
ENVIRONMENT=development  # development, staging, production
DEBUG=true
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL

# Security
SECRET_KEY=your-secret-key-for-jwt-signing-change-this-in-production
JWT_EXPIRATION_HOURS=24
CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# API Configuration
API_HOST=0.0.0.0
API_PORT=8000
API_PREFIX=/api/v1
MAX_REQUEST_SIZE=100MB

# Worker Configuration
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2
WORKER_CONCURRENCY=4
TASK_TIMEOUT=3600  # 1 hour in seconds

# ==================================================
# Storage Configuration
# ==================================================

# Object Storage (S3-compatible)
STORAGE_TYPE=local  # local, s3, gcs, azure
STORAGE_BUCKET=agi-eval-artifacts
STORAGE_PREFIX=evaluations/

# AWS S3 Configuration (if STORAGE_TYPE=s3)
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_DEFAULT_REGION=us-west-2
AWS_S3_BUCKET=agi-eval-artifacts

# Google Cloud Storage (if STORAGE_TYPE=gcs)
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json
GCS_BUCKET=agi-eval-artifacts

# Azure Blob Storage (if STORAGE_TYPE=azure)
AZURE_STORAGE_CONNECTION_STRING=your-azure-storage-connection-string
AZURE_CONTAINER_NAME=agi-eval-artifacts

# ==================================================
# External Integrations
# ==================================================

# GitHub Integration
GITHUB_TOKEN=ghp_your-github-personal-access-token
GITHUB_WEBHOOK_SECRET=your-webhook-secret-for-validation

# Weights & Biases (Optional)
WANDB_API_KEY=your-wandb-api-key
WANDB_PROJECT=agi-evaluation-sandbox
WANDB_ENTITY=your-wandb-entity

# Slack Notifications (Optional)
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
SLACK_CHANNEL=#agi-eval-notifications

# Discord Notifications (Optional)
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK

# ==================================================
# Monitoring & Observability
# ==================================================

# Prometheus Configuration
PROMETHEUS_METRICS_ENABLED=true
METRICS_PORT=9090

# Sentry Error Tracking (Optional)
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
SENTRY_ENVIRONMENT=development

# OpenTelemetry (Optional)
OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317
OTEL_SERVICE_NAME=agi-eval-sandbox

# ==================================================
# Rate Limiting & Quotas
# ==================================================

# Global Rate Limits
API_RATE_LIMIT=1000/hour  # Requests per hour per IP
EVALUATION_RATE_LIMIT=10/hour  # Evaluations per hour per user

# Model Provider Quotas
OPENAI_MAX_REQUESTS_PER_MINUTE=500
ANTHROPIC_MAX_REQUESTS_PER_MINUTE=100
GOOGLE_MAX_REQUESTS_PER_MINUTE=60

# ==================================================
# Feature Flags
# ==================================================

# Experimental Features
ENABLE_CUSTOM_BENCHMARKS=true
ENABLE_REAL_TIME_UPDATES=true
ENABLE_ADVANCED_ANALYTICS=false
ENABLE_MULTI_MODAL_EVAL=false

# Security Features
ENABLE_RATE_LIMITING=true
ENABLE_API_KEY_AUTH=true
ENABLE_AUDIT_LOGGING=true

# ==================================================
# Development & Testing
# ==================================================

# Test Configuration
TEST_DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/test_agi_eval
PYTEST_TIMEOUT=300  # 5 minutes

# Mock Services (for testing)
MOCK_MODEL_PROVIDERS=false
MOCK_EXTERNAL_APIS=false

# Performance Testing
LOAD_TEST_ENABLED=false
BENCHMARK_TIMEOUT=1800  # 30 minutes

# ==================================================
# Deployment Configuration
# ==================================================

# Health Check Configuration
HEALTH_CHECK_TIMEOUT=30
READINESS_CHECK_TIMEOUT=60

# Scaling Configuration
MIN_WORKERS=2
MAX_WORKERS=10
AUTO_SCALE_ENABLED=true

# Backup Configuration
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=30

# ==================================================
# Security Settings
# ==================================================

# HTTPS Configuration
SSL_CERT_PATH=/etc/ssl/certs/agi-eval.crt
SSL_KEY_PATH=/etc/ssl/private/agi-eval.key
FORCE_HTTPS=false

# Authentication
AUTH_PROVIDERS=github,google,email  # Comma-separated list
SESSION_TIMEOUT=86400  # 24 hours
PASSWORD_MIN_LENGTH=12

# CORS Configuration
CORS_ALLOW_CREDENTIALS=true
CORS_MAX_AGE=86400

# ==================================================
# Notes
# ==================================================

# 1. Never commit the .env file to version control
# 2. Use strong, unique passwords and API keys
# 3. Rotate credentials regularly
# 4. Use environment-specific values for each deployment
# 5. Consider using a secrets management service for production