version: '3.8'

services:
  # Development workspace (used by devcontainer)
  workspace:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NODE_ENV=development
      - PYTHONPATH=/workspace
    depends_on:
      - postgres
      - redis
    networks:
      - dev-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agi_eval_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis cache and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # API development server
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - NODE_ENV=development
      - PYTHONPATH=/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev-network

  # Dashboard development server
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
    command: npm run dev
    networks:
      - dev-network

  # Jupyter Lab for interactive development
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "8888:8888"
    volumes:
      - .:/workspace
      - jupyter_data:/home/jupyter
    working_dir: /workspace
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=''
    depends_on:
      - postgres
      - redis
    networks:
      - dev-network

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A api.celery_app worker --loglevel=info --concurrency=2
    depends_on:
      - postgres
      - redis
    networks:
      - dev-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A api.celery_app flower --port=5555
    depends_on:
      - redis
      - worker
    networks:
      - dev-network

  # MinIO for S3-compatible object storage (development)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  jupyter_data:
  minio_data:

networks:
  dev-network:
    driver: bridge